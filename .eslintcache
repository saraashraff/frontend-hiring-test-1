[{"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\index.tsx":"1","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\App.tsx":"2","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\routes\\index.js":"3","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\VerifyToken.tsx":"4","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Login\\Login.tsx":"5","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Home\\Home.tsx":"6","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\style\\index.ts":"7","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Login\\styles.ts":"8","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Home\\styles.ts":"9","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\AuthService.tsx":"10","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\api.js":"11","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\components\\Calls\\index.tsx":"12","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\components\\Calls\\styles.ts":"13","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\CallService.tsx":"14"},{"size":197,"mtime":1616540416000,"results":"15","hashOfConfig":"16"},{"size":120,"mtime":1616540416000,"results":"17","hashOfConfig":"16"},{"size":862,"mtime":1661703037776,"results":"18","hashOfConfig":"16"},{"size":293,"mtime":1616540416000,"results":"19","hashOfConfig":"16"},{"size":3101,"mtime":1661676286884,"results":"20","hashOfConfig":"16"},{"size":541,"mtime":1616540416000,"results":"21","hashOfConfig":"16"},{"size":382,"mtime":1616540416000,"results":"22","hashOfConfig":"16"},{"size":2207,"mtime":1661700538134,"results":"23","hashOfConfig":"16"},{"size":2615,"mtime":1616540416000,"results":"24","hashOfConfig":"16"},{"size":339,"mtime":1616540416000,"results":"25","hashOfConfig":"16"},{"size":407,"mtime":1616540416000,"results":"26","hashOfConfig":"16"},{"size":9914,"mtime":1661702947140,"results":"27","hashOfConfig":"16"},{"size":3575,"mtime":1661696851919,"results":"28","hashOfConfig":"16"},{"size":519,"mtime":1616540416000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"102tc6x",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\index.tsx",[],["66","67"],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\App.tsx",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\routes\\index.js",["68"],"import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport Login from '../pages/Login/Login';\nimport Global from \"../style\";\nimport Home from \"../pages/Home/Home\";\nimport  IsAuthenticated  from \"../services/VerifyToken\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      IsAuthenticated() ? (\n        <Component {...props} />\n      ) : (\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n        )\n    }\n  />\n);\n\nconst Routes = () => (\n  <BrowserRouter>\n  <Global />\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <PrivateRoute path=\"/home\" component={Home} />\n      <Route path=\"*\" component={() => <h1>Page not found</h1>} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;",["69","70"],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\VerifyToken.tsx",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Login\\Login.tsx",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Home\\Home.tsx",["71","72","73","74","75","76"],"import React, { Component } from \"react\";\nimport { Container } from \"./styles\";\nimport MissedCall from \"../../assets/img/phone-call.svg\";\nimport CallService from \"../../services/CallService\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Loading from \"../../assets/gifs/loading.gif\";\nimport Pagination from \"react-js-pagination\";\nimport Calls from \"../../components/Calls\";\n\n\nexport default class Home extends React.Component {\n\n  render() {\n    return (\n      <Container>\n          <Calls/>\n      </Container>\n    );\n  }\n}\n","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\style\\index.ts",["77"],"import styled, { createGlobalStyle } from 'styled-components';\n\nconst Global = createGlobalStyle`\n    *, h1{\n        margin: 0;\n        padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n    }\n    body {\n    -webkit-font-smoothing: antialiased !important;\n    font-family: 'Roboto', sans-serif;\n    body html #root {\n    height: 100%;\n  }\n  }\n`;\n\nexport default Global;","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Login\\styles.ts",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\pages\\Home\\styles.ts",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\AuthService.tsx",["78"],"import baseApi from './api';\n\nclass AuthService {\n    public api = baseApi();\n    constructor(){\n    }\n\n    async login(username: string, password: string){\n        const result = await this.api.post(`https://frontend-test-api.aircall.io/auth/login`, {username, password});\n        return result.data;\n    }\n\n}\n\nexport default AuthService;","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\api.js",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\components\\Calls\\index.tsx",["79","80","81"],"import React, { Component } from \"react\";\nimport { Container } from \"./styles\";\nimport MissedCall from \"../../assets/img/phone-call.svg\";\nimport CallService from \"../../services/CallService\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Loading from \"../../assets/gifs/loader.gif\";\nimport arrowDown from \"../../assets/img/arrow-down.svg\";\nimport arrowUp from \"../../assets/img/arrow-up.svg\";\nimport Pagination from \"react-js-pagination\";\nimport TuringLogo from \"../../assets/img/turing.svg\";\nimport { Table } from \"react-bootstrap\";\n\n\nexport interface Note {\n  id: string;\n  content: string;\n}\n\nexport interface Call {\n  call_type: string;\n  created_at: string;\n  direction: string;\n  duration: number;\n  from: string;\n  id: string;\n  is_archived: boolean;\n  notes: Note[];\n  to: string;\n  via: string;\n}\n\nexport interface RequestState {\n  [key: string]: any;\n  values: Call[];\n  submitSuccess: boolean;\n  loading: boolean;\n  offset?: any;\n  limit?: any;\n  totalCount: number;\n  hasNextPage: boolean;\n  detail: boolean;\n  types_call: string[];\n  type_call: string;\n  group_call: [];\n}\n\nclass Calls extends React.Component<RouteComponentProps, RequestState> {\n  listOfCalls: string[] = [];\n  constructor(props: RouteComponentProps) {\n    super(props);\n\n    this.state = {\n      call_type: \"\",\n      created_at: \"\",\n      direction: \"\",\n      duration: 0,\n      from: \"\",\n      id: \"\",\n      is_archived: false,\n      notes: [],\n      to: \"\",\n      via: \"\",\n      values: [],\n      submitSuccess: false,\n      loading: false,\n      offset: 1,\n      limit: 30,\n      totalCount: 1,\n      hasNextPage: true,\n      detail: false,\n      types_call: [],\n      type_call: \"All\",\n      group_call: [],\n    };\n  }\n  async componentDidMount() {\n   await this.getCalls();\n  }\n\n async getCalls() {\n    this.setState({ loading: true });\n    const request = new CallService();\n    try{\n     await request.getCalls(this.state.offset, this.state.limit).then(\n        (success) => {\n          this.setState({\n            submitSuccess: true,\n            values: success.nodes,\n            hasNextPage: success.hasNextPage,\n            totalCount: success.totalCount,\n            loading: false\n          });\n          this.onlyUniqueTypeCall();\n          this.setGroupCallValues();\n        })\n    }catch(e){\n      console.log(e);\n        this.setState({ loading: false, submitSuccess: false });\n    }\n  }\n\n  // filtering calls depending on call type\n  onlyUniqueTypeCall() {\n    let arrayTemp: string[] = [];\n    let valueState = this.state;\n    for (let item of valueState.values) {\n      if (!arrayTemp.includes(item.call_type)) {\n        arrayTemp.push(item.call_type);\n      }\n      this.setState({ types_call: arrayTemp });\n    }\n  }\n\n  async handleTypeCallChange(value: any) {\n   await this.setState({ type_call: value });\n    this.setGroupCallValues();\n  }\n\n  // function which sets the state of a call i.e. archived or inarchived\n  archiveCall(id: string) {\n    this.setState({ loading: true, submitSuccess: false });\n    const request = new CallService();\n    request.updateCalls(id).then(\n      () => {\n        this.setState({ loading: false, submitSuccess: true });\n        this.getCalls();\n      },\n      (error) => {\n        this.setState({ loading: false, submitSuccess: true });\n      }\n    );\n  }\n\n  //handling pagination\n  async handlePageChange(pageNumber: number) {\n   await this.setState({ offset: pageNumber });\n    this.getCalls();\n  }\n\n  //showing call details on click of arrow\n  toggleDetailCall(id: any) {\n    if (this.listOfCalls.includes(id)) {\n      this.removeArray(id);\n    } else {\n      this.listOfCalls.push(id);\n      this.setState({ detail: true });\n    }\n    this.forceUpdate();\n  }\n\n  //removing a call from its list\n  removeArray(element: any) {\n    const index = this.listOfCalls.indexOf(element);\n\n    if (index !== -1) {\n      this.listOfCalls.splice(index, 1);\n    }\n    this.setState({ detail: false });\n  }\n\n    // grouping calls according to date\n   setGroupCallValues = async()  => {\n    let groupBy = this.groupBy(this.state.values);\n    await this.setState({ group_call: groupBy });\n  }\n\n  groupBy = (xs: Call[]) => {\n    return xs.reduce((rv: any, x: any) => {\n      (this.state.type_call !== 'All' ? x.call_type === this.state.type_call : x) &&\n     (rv[new Date(x.created_at).toLocaleDateString()] =\n     rv[new Date(x.created_at).toLocaleDateString()] || []).push(x);\n      return rv;\n    }, {});\n  };\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <Container>\n        <div className=\"content\">\n          {loading ? (\n            <div className=\"loading\">\n              <img src={Loading} width=\"100\" />\n            </div>\n          ) : (\n            <div className=\"calls\">\n\n\n              <div>  <img src={TuringLogo} alt=\"\" width=\"300\" /> \n              <br></br>\n              <hr></hr>\n              <h3> Turing Technologies Frontend Test</h3>\n              </div>\n              {Object.entries(this.state.group_call)\n                .sort().map(([key, value]) => (\n                  <div>\n                    {/* <p> Filter by Status:</p> */}\n                  <select value={this.state.type_call} name=\"call_type\" id=\"call_type\" onChange={e => this.handleTypeCallChange(e.target.value)}>\n                    <option value=\"All\">Filter by Status</option>\n                    {this.state.types_call.map((type, key) =>\n                    <option key={key} value={type}>{type}</option>\n                    )}\n                  </select>\n                  \n                  <div className=\"group-call\">\n                  <div className=\"key\">\n                    <hr/>\n                   <span>\n                   {key}\n                  </span>\n                  <hr/>\n                  <br></br>\n                 \n                  </div>  \n                    {Object(value).map((item: any) => (\n                      \n                      <div className=\"call\" key={item.id}>\n                         <div>\n                         <Table striped bordered hover variant=\"dark\">\n                          <thead>\n                            <tr>\n                              <th>Call Type</th>\n                              <th>Direction</th>\n                              <th>Duration</th>\n                              <th>From</th>\n                              <th>To</th>\n                              <th>Via</th>\n                              <th>Created At</th>\n                              <th>Status</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <td> <span>{item.call_type}</span></td>\n                              <td><span>{item.direction}</span></td>\n                              <td><span>{item.duration} seconds</span></td>\n                              <td><span>{item.from}</span></td>\n                              <td><span>{item.to}</span></td>\n                              <td><span>{item.via}</span></td>\n                              <td>\n                                <span className=\"time\">\n                                  {new Date(item.created_at).toLocaleTimeString()}\n                                </span>\n                              </td>\n                              <td><span>{item.is_archived ? \"Archived\" : \"Unarchived\"} </span></td>\n                              \n                            </tr>\n                            \n                          </tbody>\n                        </Table> </div>\n                        \n                        <div className=\"call-info\">\n                          {/* <span>To: {item.to}</span> */}\n                          <span></span>\n                            <button onClick={(e) => this.archiveCall(item.id)}>\n                             {item.is_archived ? 'Unarchive' : 'Archive'} \n                            </button>\n                        </div>\n                        \n                        {this.listOfCalls.includes(item.id) ? (\n                          <div className=\"detail\">\n                            <hr />\n                            <div className=\"card\">\n                            \n                              <div className=\"description\">\n                                <span className=\"title\">Notes: </span>\n                                {item.notes.length >= 1 ? (\n                                  item.notes.map((note: any, key: any) => (\n                                    <span key={key}>{note.content}</span>\n                                  ))\n                                ) : (\n                                  <span>No notes</span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"footer\">\n                          <img\n                            onClick={(e) => this.toggleDetailCall(item.id)}\n                            src={\n                              this.listOfCalls.includes(item.id)\n                                ? arrowUp\n                                : arrowDown\n                            }\n                            alt=\"\"\n                            width=\"12\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  </div>\n                ))}\n              <Pagination\n                activePage={this.state.offset}\n                itemsCountPerPage={this.state.limit}\n                totalItemsCount={this.state.totalCount}\n                pageRangeDisplayed={3}\n                onChange={this.handlePageChange.bind(this)}\n              />\n            </div>\n          )}\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(Calls);\n","C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\components\\Calls\\styles.ts",[],"C:\\Users\\hp\\Downloads\\turing-technologies-test-sara\\src\\services\\CallService.tsx",["82"],"import baseApi from './api';\n\nclass CallService {\n    public api = baseApi();\n    constructor(){\n    }\n\n    async getCalls(offSet: any, limit: any){\n        const result = await this.api.get(`https://frontend-test-api.aircall.io/calls`, {params: {offset: offSet, limit: limit}});\n        return result.data;\n    }\n\n    async updateCalls(id: string, ){\n        const result = await this.api.put(`https://frontend-test-api.aircall.io/calls/${id}/archive`);\n        return result.data;\n    }\n}\n\nexport default CallService;",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":50,"nodeType":"89","messageId":"90","endLine":2,"endColumn":60},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"91","severity":1,"message":"93","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":18},{"ruleId":"91","severity":1,"message":"94","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":5,"column":10,"nodeType":"89","messageId":"90","endLine":5,"endColumn":29},{"ruleId":"91","severity":1,"message":"96","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":15},{"ruleId":"91","severity":1,"message":"97","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":18},{"ruleId":"91","severity":1,"message":"98","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":5,"column":5,"nodeType":"101","messageId":"102","endLine":6,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"91","severity":1,"message":"93","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":18},{"ruleId":"103","severity":1,"message":"104","line":183,"column":15,"nodeType":"105","endLine":183,"endColumn":48},{"ruleId":"99","severity":1,"message":"100","line":5,"column":5,"nodeType":"101","messageId":"102","endLine":6,"endColumn":6},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Component' is defined but never used.","'MissedCall' is defined but never used.","'CallService' is defined but never used.","'RouteComponentProps' is defined but never used.","'Loading' is defined but never used.","'Pagination' is defined but never used.","'styled' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]